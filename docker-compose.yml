version: '3.8'

services:
  # PostgreSQL Database for MLflow and application metadata
  postgres:
    image: postgres:15-alpine
    container_name: ai_demo_postgres
    environment:
      POSTGRES_USER: ai_demo
      POSTGRES_PASSWORD: ai_demo_password
      POSTGRES_DB: ai_demo
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_demo"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ai_demo_network

  # Redis for caching and message queues
  redis:
    image: redis:7-alpine
    container_name: ai_demo_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - ai_demo_network

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: ai_demo_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ai_demo_network

  # MLflow Tracking Server
  mlflow:
    image: python:3.11-slim
    container_name: ai_demo_mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://ai_demo:ai_demo_password@postgres:5432/ai_demo
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://mlflow-artifacts/
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
    volumes:
      - ./docker/mlflow/start_server.sh:/start_server.sh:ro
    command: bash /start_server.sh
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai_demo_network

  # Ollama for local LLM serving
  ollama:
    image: ollama/ollama:latest
    container_name: ai_demo_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ./docker/ollama/init.sh:/init.sh:ro
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ai_demo_network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ai_demo_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ai_demo_network

  # Kafka for message streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ai_demo_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai_demo_network

  # Kafka UI for management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ai_demo_kafka_ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - ai_demo_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_demo_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ai_demo_network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ai_demo_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ai_demo_network

  # Jupyter Lab for interactive notebooks
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: ai_demo_jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=ai_demo_token
    volumes:
      - ./notebooks:/home/jovyan/work
      - jupyter_data:/home/jovyan
    networks:
      - ai_demo_network

  # FastAPI Application Server
  api-server:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: ai_demo_api
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - OLLAMA_HOST=ollama
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MINIO_ENDPOINT=minio:9000
    volumes:
      - ./ai_architect_demo:/app/ai_architect_demo:ro
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mlflow:
        condition: service_healthy
      ollama:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai_demo_network

  # Streamlit Web Dashboard
  web-dashboard:
    build:
      context: .
      dockerfile: docker/dashboard/Dockerfile
    container_name: ai_demo_dashboard
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://api-server:8000
    volumes:
      - ./ai_architect_demo:/app/ai_architect_demo:ro
    depends_on:
      api-server:
        condition: service_healthy
    networks:
      - ai_demo_network

  # Celery Worker for background tasks
  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    container_name: ai_demo_worker
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - OLLAMA_HOST=ollama
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MINIO_ENDPOINT=minio:9000
    volumes:
      - ./ai_architect_demo:/app/ai_architect_demo:ro
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      replicas: 2
    networks:
      - ai_demo_network

# Named volumes for data persistence
volumes:
  postgres_data:
  redis_data:
  minio_data:
  ollama_data:
  prometheus_data:
  grafana_data:
  jupyter_data:

# Custom network for service communication
networks:
  ai_demo_network:
    driver: bridge